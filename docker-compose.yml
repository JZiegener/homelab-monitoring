version: "3"
networks:
  loki:
  proxy:
    external: true
services:
  loki:
    image: grafana/loki:2.4.0
    user: "1000:1000"
    volumes:
      - ${LOKI_STORAGE}:/tmp/loki
      - ./loki-config.yml:/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    restart: unless-stopped
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - loki

  promtail:
    image: grafana/promtail:2.4.0
    volumes:
      - /var/log:/var/log
      - ./promtail-config.yml:/etc/promtail/promtail-config.yml
    restart: unless-stopped
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
    user: "1000:1000"
    volumes:
    - ${GRAFANA_STORAGE}:/var/lib/grafana/
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - loki

  prometheus:
    image: prom/prometheus:latest
    user: "1000:1000"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ${PROMETHEUS_STORAGE}data/:/prometheus/
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - loki

  snmp-exporter:
    image: prom/snmp-exporter
    restart: unless-stopped
    volumes:
      - ./snmp.yml:/etc/snmp_exporter/snmp.yml
    ports:
      - "9116:9116"
      
  pi-hole-exporter:
    image: ekofr/pihole-exporter:latest
    ports:
      - 9617:9617
    environment:
      PIHOLE_HOSTNAME: "${PI_HOLE_HOSTNAME}"
      PIHOLE_API_TOKEN: "${PI_HOLE_TOKEN}"
      INTERVAL: "30s"
      #PORT: "9617"
    restart: unless-stopped
    networks:
      - loki

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    volumes:
      - ./otel-collector-config.yaml:/etc/otel/config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8086:8086"   # Influx db reciever
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "9101:9101"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "55679:55679" # zpages extension
    restart: unless-stopped
    networks:
      - loki
  
  speedtest:
    image: ghcr.io/danopstech/speedtest_exporter:latest
    ports: 
      - 9091:9091
    restart: unless-stopped
    networks:
      - loki

  prom-pve:
    image: prompve/prometheus-pve-exporter
    ports:
      - 9221:9221
    environment:
      PVE_USER: "${PVE_USER}"
      PVE_TOKEN_NAME: "${PVE_TOKEN_NAME}"
      PVE_TOKEN_VALUE: "${PVE_TOKEN_VALUE}"
      PVE_VERIFY_SSL: "${PVE_VERIFY_SSL}"
    restart: unless-stopped
    networks:
      - loki

  traefik:
      image: traefik:latest
      restart: unless-stopped
      security_opt:
        - no-new-privileges:true
      networks:
        - proxy
        - loki
      ports:
        - 80:80
        - 443:443
      environment:
        CLOUDFLARE_DNS_API_EMAIL: "${CF_API_EMAIL}"
        CLOUDFLARE_DNS_API_TOKEN: "${CF_DNS_API_TOKEN}"
        # - CF_API_KEY=YOU_API_KEY
        # be sure to use the correct one depending on if you are using a token or key

      command: --log.level=DEBUG
      volumes:
        - /etc/localtime:/etc/localtime:ro
        - /var/run/docker.sock:/var/run/docker.sock:ro
        - ${TRAEFIK_STORAGE}traefik.yml:/traefik.yml:ro
        - ${TRAEFIK_STORAGE}acme.json:/acme.json
        - ${TRAEFIK_STORAGE}config.yml:/config.yml:ro
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.traefik.entrypoints=http"
        - "traefik.http.routers.traefik.rule=Host(`traefik-dashboard.local.${DOMAIN}`)"
        - "traefik.http.middlewares.traefik-auth.basicauth.users=${BASIC_AUTH}"
        - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
        - "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https"
        - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
        - "traefik.http.routers.traefik-secure.entrypoints=https"
        - "traefik.http.routers.traefik-secure.rule=Host(`traefik-dashboard.local.${DOMAIN}`)"
        - "traefik.http.routers.traefik-secure.middlewares=traefik-auth"
        - "traefik.http.routers.traefik-secure.tls=true"
        - "traefik.http.routers.traefik-secure.tls.certresolver=cloudflare"
        - "traefik.http.routers.traefik-secure.tls.domains[0].main=${DOMAIN}"
        - "traefik.http.routers.traefik-secure.tls.domains[0].sans=*.local.${DOMAIN}"
        - "traefik.http.routers.traefik-secure.service=api@internal"
 
